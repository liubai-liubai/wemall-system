# 微信小程序商城系统开发规范

## 项目概述
这是一个基于现代化技术栈的微信小程序商城系统，包含后端API、管理后台和小程序前端三个模块。

## 技术栈约束

### 后端API (mall-api)
- 必须使用 Node.js 18.x + TypeScript
- 必须使用 Koa.js 作为Web框架
- 必须使用 Prisma 作为ORM
- 必须使用 JWT + 微信小程序授权
- 数据库必须使用 MySQL 8.0
- 缓存必须使用 Redis
- 部署必须使用腾讯云函数SCF

### 管理后台 (mall-admin)
- 必须使用 Vue 3.x + TypeScript + Composition API
- 必须使用 Vite 作为构建工具
- 必须使用 Element Plus 作为UI组件库
- 必须使用 Pinia 作为状态管理
- 必须使用 Vue Router 4
- 必须使用 ECharts 作为图表库
- 必须使用 Axios 作为HTTP客户端

### 小程序前端 (mall-miniprogram)
- 必须使用 uni-app 框架
- 必须使用 uView UI 2.0
- 必须使用 Pinia 作为状态管理
- 必须支持微信小程序、H5多端

## 目录结构规范

### 后端API目录结构
```
mall-api/
├── src/
│   ├── controllers/     # 控制器，负责请求处理
│   ├── services/        # 业务逻辑层
│   ├── models/          # 数据模型
│   ├── middleware/      # 中间件
│   ├── utils/           # 工具函数
│   ├── config/          # 配置文件
│   └── types/           # TypeScript类型定义
├── prisma/              # 数据库Schema
├── tests/               # 测试文件
└── serverless.yml       # 云函数配置
```

### 管理后台目录结构
```
mall-admin/src/
├── api/                 # API接口封装
├── components/          # 通用组件
├── layout/              # 布局组件
├── router/              # 路由配置
├── store/               # Pinia状态管理
├── utils/               # 工具函数
├── views/               # 页面组件
│   ├── system/          # 系统管理
│   ├── mall/            # 商城管理
│   └── dashboard/       # 仪表盘
└── assets/              # 静态资源
```

## 编码规范

### TypeScript规范
- 所有文件必须使用TypeScript
- 必须定义明确的接口和类型
- 禁止使用 any 类型，必须使用具体类型
- 必须使用严格模式 (strict: true)

### 命名规范
- 文件名：kebab-case (如: user-service.ts)
- 变量名：camelCase (如: userName)
- 常量名：UPPER_SNAKE_CASE (如: MAX_RETRY_COUNT)
- 类名：PascalCase (如: UserService)
- 接口名：PascalCase，以I开头 (如: IUserInfo)
- 组件名：PascalCase (如: UserList.vue)

### Vue 3 规范
- 必须使用 Composition API
- 必须使用 <script setup> 语法
- Props必须定义明确的类型
- 必须使用 defineEmits 定义事件
- 组件名必须是多个单词

### 代码质量
- 必须通过ESLint检查
- 必须通过Prettier格式化
- 单个函数不超过50行
- 单个文件不超过300行
- 必须添加适当的注释

## API设计规范

### RESTful API
- GET: 获取资源
- POST: 创建资源
- PUT: 更新整个资源
- PATCH: 部分更新资源
- DELETE: 删除资源

### 统一响应格式
```typescript
interface ApiResponse<T = any> {
  code: number;        // 状态码
  message: string;     // 消息
  data: T;            // 数据
  timestamp: number;   // 时间戳
}
```

### 分页响应格式
```typescript
interface PageResponse<T> {
  code: number;
  message: string;
  data: {
    list: T[];       // 数据列表
    total: number;   // 总数
    page: number;    // 当前页
    size: number;    // 页大小
    pages: number;   // 总页数
  };
  timestamp: number;
}
```

### 错误处理
- 4xx: 客户端错误
- 5xx: 服务器错误
- 必须返回有意义的错误信息

## 数据库设计规范

### 表命名
- 使用复数形式 (如: users, orders)
- 小写下划线命名 (如: user_addresses)

### 字段命名
- 小写下划线命名 (如: user_id, created_at)
- 主键必须使用 id (varchar(36) UUID)
- 创建时间: created_at (timestamp)
- 更新时间: updated_at (timestamp)

### 索引规范
- 主键索引: PRIMARY KEY
- 唯一索引: uk_ 前缀
- 普通索引: idx_ 前缀
- 外键约束: fk_ 前缀

## 安全规范

### 身份验证
- 后端API必须使用JWT认证
- 小程序必须使用微信授权
- Token必须设置合理的过期时间

### 数据安全
- 敏感信息必须加密存储
- SQL查询必须使用参数化查询
- 输入数据必须进行校验和过滤
- 必须防范XSS、CSRF攻击

### 权限控制
- 实现RBAC权限控制
- API接口必须进行权限校验
- 前端路由必须进行权限验证

## 性能要求

### 缓存策略
- 热点数据必须使用Redis缓存
- 静态资源必须使用CDN
- API响应必须合理使用缓存

### 数据库优化
- 必须为常用查询字段添加索引
- 避免N+1查询问题
- 大数据量查询必须分页

### 前端性能
- 组件必须按需加载
- 图片必须懒加载
- 代码必须进行分割和压缩

## 测试要求

### 单元测试
- 核心业务逻辑必须有单元测试
- 测试覆盖率不低于80%
- 必须使用Jest测试框架

### 接口测试
- 关键API必须有接口测试
- 必须测试正常和异常情况

## 部署规范

### 环境配置
- 开发环境: development
- 测试环境: test  
- 生产环境: production
- 必须使用环境变量管理配置

### 版本管理
- 使用Git Flow分支策略
- 遵循语义化版本号
- 必须编写清晰的commit信息

## 代码审查要求

### 提交前检查
- 代码必须通过ESLint检查
- 代码必须通过TypeScript类型检查
- 必须运行相关测试
- 必须更新相关文档

### 代码审查标准
- 功能实现是否符合需求
- 代码质量是否达标
- 是否存在安全隐患
- 性能是否合理

## 文档要求

### 代码注释
- 复杂业务逻辑必须添加注释
- 公共函数必须添加JSDoc注释
- 组件必须添加prop和emit注释

### API文档
- 使用Swagger/OpenAPI 3.0
- 必须包含请求参数、响应格式
- 必须包含错误码说明

## 禁止行为

### 代码质量
- 禁止使用var声明变量
- 禁止使用any类型
- 禁止直接操作DOM
- 禁止使用eval()
- 禁止提交调试代码

### 安全相关
- 禁止硬编码密码和密钥
- 禁止在客户端存储敏感信息
- 禁止使用拼接SQL
- 禁止忽略错误处理

### 性能相关
- 禁止在循环中进行数据库查询
- 禁止加载不必要的大文件
- 禁止深层嵌套循环

## 异常处理

### 错误日志
- 所有错误必须记录日志
- 日志必须包含错误堆栈
- 必须区分错误级别

### 用户体验
- 给用户友好的错误提示
- 网络错误必须有重试机制
- 页面加载必须有loading状态

## 持续集成

### 自动化检查
- 代码提交时自动运行lint
- 自动运行单元测试
- 自动进行类型检查

### 部署流程
- 开发分支自动部署到测试环境
- 主分支自动部署到生产环境
- 部署失败必须自动回滚

遵循以上规范可以确保项目的高质量交付和长期维护性。 